Hi and welcome, this is tutorial.1! Here, you'll learn about the stack and stack frames. To reach that objective, we'll watch the stack changing as a simple C code runs. So first, let's take a look at the code.
pcode
This is a really simple code, as you can see. We have the entry point, which is the main(). This is linked by the compiler to libc and gets called by it, we'll take a look on that later.
main() declares three local variables with constant values and one of them will be passed as an argument to the recursive function my_recursion().
my_recursion() is also a simples function that receives one argument "i" and declares no local scope variables. It'll run i+1 times, and as we can see i is passed as constant my_int which is 3, so my_recursion() will run 4 times.
As you'll see later, every call to a function is pretty much the same from the stack point of view, so there's no point in doing too many calls as it would just bore you (which is the exact opposite of a learning technology's objective).
So this is what we'll do: every time the stack pointer (i.e. the pointer to the top of the stack) changes, we'll stop the program and take a look at the stack.
So, take a last look at the code because we are about to begin!
pcode
Okay, we're back. Just remember, any time you can type 'q' to enter command mode and then 'c' to go to command prompt. There, you can type "pcode" so look at the code again, or "help" to see other available commands.
Let's start executing the code.
pstack
Ok, so first a few considerations about how the stack is shown. Remember from your classes, the heap grows up and the stack grows down - this basically means that the %sp (which is the register that stores the stack pointer - i.e. the address to the top of the stack) is decremented everytime it changes. Also, %sp is called %rsp for the x86 architecture.
If you look at the stack right now, you'll see 9 hex values. The leftmost one is a 64-bit (most significant 00 is omitted) address. The other 8 ones are 8-bit values.
Let's take a closer look at them. The first, before the vertical bar, is $sp register value, i.e. the current top of the stack. The other 8 values are 8 different bytes, least to most significative.
Notice that this means that the bytes are represented on reverse order, and we should read it from right to left. However, each individual byte should be read from left to right, like you normally do. Confusing? I'll try to help. Let's look at an example.
Take a look at the line: | 0xff | 0x01 0x00 0x00 0x00 0x02 0x00 0x00 0x00 | This line means: The address | 0xff | points to the value | 0x0000000200000001 |. Can you see it now? even though the right most byte is 0x01, it is the least significative byte. It also really represents 0x01, no need to invert it. If you're dealing with this the first time, it could be confusing, so take your time. You'll get used to it.
Now, let's try examining the stack. Right now, we have only one address there. Can you guess what it is?
This one was a trick question, because this isn't part of our running application. During libc startup flow, it'll call your C program main from it's own function, called __libc_start_call_main. Let's concatenate these 8 bytes and check out which symbol this address points to.
Type "command x/8xg $sp" so we can check the hexadecimal full address. This will show us %sp and the associated symbol from the compilers symbol table, if there's one. The command means: take the first 8 bytes from the address i'm telling you (which in our case is $sp) and print it in hexadecimal as a giant word. Type commands exactly like they are written between the "".
command x/8xg $sp
Cool, this is __libc_start_call_main plus 128 bytes. We can also see that the address printed is the concatenation of our current stack's first 8 bytes.
Notice that address is printed right to left on our stack, last printed byte is actually address first byte. Individual bytes are printed from left to right as you'd expect.
Now let's try checking what line that is.
Type "command info lines *($sp)" so we can check the line current stack pointer top is pointing to. This will show us a readable code line from the address pointed to by %sp, if it represents a code line of course.
command info lines *($sp)
Nice, we can see that main is being called directly by __libc_start_main. That means that libc linked our program to the library and is now calling our main(), like any function you call on your own userspace programs. Notice that this is the same address - except for the fact that it is aligned - as the one on the bottom of our stack.
Explaining in a little more detail, every time a call is made by an application, the return address must be stored so it knows where to go back to after the return. This is made by pushing %pc (called %rip for x86_64) to the stack. This means that the top of the previous stack frame, i.e., the caller frame, is always the return address.
Now let's keep going.
pstack
Here, another interesting thing happened. Current value on top of the stack is an 8 bytes 0x1. What's that? Let's check the assembly code to try and figure out.
Type "command x/2i main" to print the first 2 machine code instructions from main.
command x/2i main
Great. Here, we can see that the first instruction is pushing %rbp. That register is the stack frame register, and it points to start of the previous stack, which is libc's stack, and it's value is 0x01.
One important thing to notice is that this is a VIRTUAL ADDRESS, which does not correspond to the real memory address, called PHYSICAL ADDRESS. The only software that knows the real address is the operating system, and it gets it by requesting to the MMU, but that's out of our scope for this first class.
Let's keep going.
pstack
Now we are looking at the main() stack frame. First, let's take a look at our program.
Type "command list main," to check the first 5 lines of main function.
command list main,
Can you guess now to what our current stack pointer points to?
If you said "to the top of our local variables allocation space", you're correct! Now, before I explain to you, trying figuring out: Why are there 16 bytes allocated instead of just the 12 we have (3 integers)? Where are the values we assigned to them?
If you could'nt understand, don't worry! I'll tell you! First, Linux aligns the stack memory (for the x86_64 architecture, of course) to 16 bytes, so that it aligns with the MMX registers, which are used for floating pointer operations by SSE instructions. This allows memory allocation to be waaay faster by using C's alignof. But that's out of our scope.
Second, the values aren't there yet, because right now the code is just manipulating the stack size. Next time the stack changes, we'll get back to those addresses.
Also, remember that memory is printed right to left, down to up. That means that the first 4 bytes on our last printed address is thrash (not allocated), next 4 bytes concatenated are our first local value, and so on.
Ok. So now, before I get you clueless again, let's give you a preemptive (pun intended) clue. Let's take a look at the full main.
Type "command list," to print main from where we stopped last time.
command list,
Ok. Now let's keep going.
pstack
Now, what happened on our code flow that should change the stack? Think about what happened when we first started main. What's the first instruction of when we jump to a new function? Remember, you can always change to command mode by pressing 'q' and then go to command prompt by pressing 'c', then look at the code again. Type "help" on command prompt for further info.
If you guessed "push the previous %rip" you guessed right! The top of our stack is now the address that we should return to when our function returns. Before we keep going, let's also look to our previous addresses.
Notice our previously allocated 16 bytes (our main() local vars). The last 12 changed! That's right, they now store the values we assigned to our local variables!
Let' list main again. Type "command list main," to list the first 5 lines.
command list main,
Ok, now try to figure out which address is each var.
Ok, first one is easy. Start of local vars space minus 4 bytes is the start of our first var, which has the value 3 (if you're confused, remember that bytes are printed left to right, addresses are printed right to left and down to up. Next one is 13 in hexadecimal, so also easy.
The next value is tricky. It should be -1, but instead it's the highest number possible for a 4 byte value, 0xffffffff. Why?
It's because our variable is a SIGNED integer, which means that it is stored as a two's complement in memory (again, x86_64 choice).
Type "command list my_recursion," so we can see the first lines of callee function.
command list my_recursion,
Ok, now let's keep going.
pstack
Stack changed again! What happened now? Remember main code flow! Tip: go to command prompt if you need to double check our source code!
Yes! We have pushed previous %rbp, which is the pointer to the top of our previous frame. You can even concatenate the 8 bytes on your head and check to where it points to on our stack.
If you figured out "the start of main() - the caller - frame", you are correct.
pstack
Stack changed, and this time we have 16 new bytes. What are those for? We do not have locals :monkaHmm:
Function arguments are treated as locals and stored on stack! So our stack frame expandaded 16 bytes (why 16? Remember!) to keep the argument we passed to my_recursion()! They are also all thrash, because we are not yet assigning values!
pstack
Cool, there's now 8 more bytes on our stack. Now, just looking at the stack, can you guess what happened on our code flow? What did our program do next?
That's right! Our recursion was called once more and %rip was pushed to the top of the stack. More than that, notice that the first byte of the var memory space changed, can you find it? A hint: it's value is now 3.
Let's keep going. But before we do, can you guess what happens next?
pstack
So, did you get it right? Yeah, I knew you would! Top of our stack now points to the frame pointer of our previos frame! Let's keep going.
pstack
More allocated variables. You're getting the hang of it, right? right??? So now: guess what's going to be the value of the first byte of our variable memory space when stack changes again! Look at the source code again if you need to, no shame on that!
pstack
So, did you get it? "It's going to be 2, which is the value of 'i' for the second iteration" was the right answer!! Ok, Now we are going to update the stack a few times in a row. Try to get what's going on, look at the source code if you neeed to. I'll see you on a bit!
pstack
pstack
pstack
Woops, our stack is starting to grow a lot! Try to guess: next time we update, how many times will our recursion have been called? Just a hint: remember to look for the value of 'i' on our stack! 
pstack
pstack
So? Did you get it right?!?!? Yes, I know you did. Grats!
We can see now that i == 0, so we are about to start returning! It's going to be a ride, so hang on to your seats!
pstack
Wow, or stack just shrank! Yes, of course, as far as memory is concerned, the values are still there. It's just that we cannot access it anymore, because $sp now points to a higher value, which is our current top of the stack. So, can you figure out what is the top of our stack? Remember the 'push' sequence, and it's going to be easy to figure out the 'pull'.
That's it! We now have the address of the instruction to which we should return! Next thing the code flow is going to do, is pull the stack to our Program Counter, and next instruction that's going to be executed is going to be from the line of code immediately after the function call! Let's go!!!!
pstack
Ok, so now we are back to our previous frame. The top of the stack points to the end of the local variables memory space. Can you find the value of 'i'? Spoiler: it's our previous 'i' plus 1!
pstack
Ok, so we are just past through another return! Now the top of the stack has the previous $pc, which will once again be pushed to the Program Counter and executed by the processor.
pstack
Once again, $sp now points to the top of the local var mem space. Can you find i?
pstack
pstack
We are now fully back, and i == 3! Can you guess if this is the main() function yet?! Let's push forward and you can check if you're right!
pstack
pstack
You weren't! That was our last recursion, as we could see by looking at the fact that there were 2 local var mem spaces! Now, we only have one, and this is main()!
Let's keep going and call it a day.
pstack
Ok, so now the only thing left to do is give control back to libc and our job here is done! Our friend the compiler will clean leftovers and finish execution for us. Thanks compiler!
This it! Congrats! You have reached the end of your first tutorial, the tutorial of tutorials! One tutorial to rule them all. 
I hope you were able to learn a bit more about the stack and it's frames, as well as about Operating Systems internals and compiler behavior and, of course, about penguinExplorer! See you next time!
